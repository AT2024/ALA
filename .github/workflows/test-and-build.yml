name: Test and Build

# =================================================================
# Triggered on: Feature branches, PRs, develop branch
# Purpose: Run comprehensive tests before allowing merges
# =================================================================

on:
  push:
    branches-ignore:
      - main
      - production
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '16'

jobs:
  # =================================================================
  # Lint and Type Check
  # =================================================================
  lint-and-types:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Backend linting and type checking
      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Backend Lint
        run: |
          cd backend
          npm run lint

      - name: Backend Type Check
        run: |
          cd backend
          npm run build

      # Frontend linting and type checking
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Frontend Lint
        run: |
          cd frontend
          npm run lint

      - name: Frontend Type Check
        run: |
          cd frontend
          npm run type-check || npm run build

  # =================================================================
  # Backend Unit and Integration Tests
  # =================================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint-and-types

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Run Backend Unit Tests
        env:
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret_for_github_actions
          PRIORITY_MOCK: true
        run: |
          cd backend
          npm test -- --coverage

      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # =================================================================
  # Frontend Unit Tests
  # =================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint-and-types

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Frontend Unit Tests
        run: |
          cd frontend
          npm test -- --coverage

      - name: Upload Frontend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # =================================================================
  # Docker Build Test
  # =================================================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: ala-backend:test
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: ala-frontend:test
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          # Create minimal test environment file
          mkdir -p deployment/environments
          cat > deployment/environments/.env.test << EOF
          NODE_ENV=test
          DB_USER=postgres
          DB_PASSWORD=test_password
          PRIORITY_MOCK=true
          JWT_SECRET=test_jwt_secret
          EOF

          # Test docker-compose build
          docker-compose -f deployment/docker/docker-compose.dev.yml build

  # =================================================================
  # Security Scan (Enhance existing)
  # =================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Dependency scanning
      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=high

      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high

      # Container security scanning (leverage existing Trivy setup)
      - name: Build images for scanning
        run: |
          docker build -t ala-backend-scan ./backend --target production
          docker build -t ala-frontend-scan ./frontend --target production

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ala-backend-scan'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ala-frontend-scan'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-trivy-results.sarif'

      - name: Upload Frontend Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'frontend-trivy-results.sarif'

  # =================================================================
  # E2E Tests (Conditional)
  # =================================================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request' && contains(github.head_ref, 'main') || github.ref == 'refs/heads/develop'

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ala_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci
          cd ../backend
          npm ci

      # Start backend for E2E tests
      - name: Start Backend
        env:
          DATABASE_URL: postgres://postgres:test_password@localhost:5432/ala_test
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret_for_e2e
          PRIORITY_MOCK: true
          PORT: 5000
        run: |
          cd backend
          npm start &
          sleep 15

      # Start frontend for E2E tests
      - name: Start Frontend
        env:
          VITE_API_URL: http://localhost:5000/api
          VITE_ENVIRONMENT: test
        run: |
          cd frontend
          npm run dev &
          sleep 10

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Run E2E Tests
        run: |
          cd frontend
          npm run test:e2e:ci

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  # =================================================================
  # Summary Status Check
  # =================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-types, backend-tests, frontend-tests, docker-build, security-scan]
    if: always()

    steps:
      - name: Check Test Results
        run: |
          if [[ "${{ needs.lint-and-types.result }}" == "success" && \
                "${{ needs.backend-tests.result }}" == "success" && \
                "${{ needs.frontend-tests.result }}" == "success" && \
                "${{ needs.docker-build.result }}" == "success" && \
                ("${{ needs.security-scan.result }}" == "success" || "${{ needs.security-scan.result }}" == "skipped") ]]; then
            echo "✅ All tests passed!"
            exit 0
          else
            echo "❌ Some tests failed!"
            echo "Lint/Types: ${{ needs.lint-and-types.result }}"
            echo "Backend Tests: ${{ needs.backend-tests.result }}"
            echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
            echo "Docker Build: ${{ needs.docker-build.result }}"
            echo "Security Scan: ${{ needs.security-scan.result }}"
            exit 1
          fi