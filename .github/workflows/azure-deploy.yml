name: Deploy to Production

on:
  push:
    branches:
      - production  # Only deploy to production from production branch
  workflow_dispatch:
    inputs:
      skip_backup:
        description: 'Skip database backup (not recommended)'
        required: false
        default: false
        type: boolean
      skip_staging_check:
        description: 'Skip staging verification (emergency only)'
        required: false
        default: false
        type: boolean

env:
  AZURE_VM_IP: '20.217.84.100'

jobs:
  # =================================================================
  # Pre-deployment Safety Checks
  # =================================================================
  pre-deployment-checks:
    name: Pre-deployment Safety Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Production Branch
        run: |
          if [[ "${{ github.ref_name }}" != "production" ]]; then
            echo "‚ùå Production deployment must be from 'production' branch"
            echo "Current branch: ${{ github.ref_name }}"
            exit 1
          fi
          echo "‚úÖ Deploying from production branch"

      - name: Check Staging Health (unless skipped)
        if: ${{ !inputs.skip_staging_check }}
        run: |
          echo "üîç Checking staging environment health..."
          if curl -f http://${{ env.AZURE_VM_IP }}:5010/api/health; then
            echo "‚úÖ Staging environment is healthy"
          else
            echo "‚ö†Ô∏è Staging environment is not accessible"
            echo "Consider fixing staging before production deployment"
            exit 1
          fi

  # =================================================================
  # Production Deployment
  # =================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    environment: production  # Require manual approval for production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create Production Backup
        if: ${{ !inputs.skip_backup }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            echo "üíæ Creating production database backup..."

            # Create backup directory
            mkdir -p ~/backups/production

            # Create timestamped backup
            backup_file="production_backup_$(date +%Y%m%d_%H%M%S).sql"

            # Backup production database
            if docker exec ala-db-azure pg_dump -U ala_user ala_production > ~/backups/production/$backup_file; then
              echo "‚úÖ Database backup created: $backup_file"
              echo "Backup size: $(du -h ~/backups/production/$backup_file | cut -f1)"
            else
              echo "‚ùå Database backup failed!"
              exit 1
            fi

            # Keep only last 5 backups to save space
            cd ~/backups/production
            ls -t production_backup_*.sql | tail -n +6 | xargs -r rm

            echo "üíæ Pre-deployment backup completed"

      - name: Deploy to Azure VM Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "üöÄ Starting PRODUCTION deployment (Medical Application)..."
            echo "‚ö†Ô∏è This deployment will affect live medical data systems"

            # Create deployment log entry
            echo "[$(date -Iseconds)] PRODUCTION DEPLOYMENT: Started from commit ${{ github.sha }}" >> ~/ala-improved/production-deployment.log

            # Navigate to project directory
            cd ~/ala-improved || { echo "‚ùå Project directory not found"; exit 1; }

            # Record current version for potential rollback
            current_commit=$(git rev-parse HEAD)
            echo "üìù Current version before deployment: $current_commit"

            # Pull latest changes from production branch
            echo "üì• Pulling latest production code..."
            git fetch --all
            git reset --hard origin/production

            # Verify production environment file exists
            if [ ! -f "deployment/azure/.env.azure" ]; then
              echo "‚ùå Production environment file not found!"
              exit 1
            fi

            echo "üõë Stopping current production services..."
            docker-compose -f deployment/azure/docker-compose.azure.yml down

            # Clean up unused resources to free space
            docker system prune -f

            echo "üèóÔ∏è Building and starting new production containers..."
            docker-compose -f deployment/azure/docker-compose.azure.yml --env-file deployment/azure/.env.azure up -d --build

            # Wait for containers to initialize
            echo "‚è≥ Waiting for services to initialize..."
            sleep 45

            # Show container status
            echo "üìä Production container status:"
            docker ps --filter "name=ala-.*-azure"

            echo "‚úÖ Production deployment completed!"
            echo "[$(date -Iseconds)] PRODUCTION DEPLOYMENT: Completed successfully" >> production-deployment.log
      
      - name: Verify Production Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "üîç Verifying production deployment..."

            # Check container status
            if docker ps | grep -q ala-frontend-azure; then
              echo "‚úÖ Frontend container is running"
            else
              echo "‚ùå Frontend container is not running"
              docker ps --filter "name=ala-frontend-azure"
              exit 1
            fi

            if docker ps | grep -q ala-api-azure; then
              echo "‚úÖ Backend container is running"
            else
              echo "‚ùå Backend container is not running"
              docker ps --filter "name=ala-api-azure"
              exit 1
            fi

            if docker ps | grep -q ala-db-azure; then
              echo "‚úÖ Database container is running"
            else
              echo "‚ùå Database container is not running"
              docker ps --filter "name=ala-db-azure"
              exit 1
            fi

            # Wait for services to fully initialize
            echo "‚è≥ Waiting for services to fully initialize..."
            sleep 30

            # Comprehensive health checks
            echo "üîç Running comprehensive health checks..."

            # Backend API health check
            max_attempts=15
            attempt=0
            echo "Testing backend API health..."

            while [ $attempt -lt $max_attempts ]; do
              if curl -f http://localhost:5000/api/health; then
                echo "‚úÖ Backend API health check passed"
                break
              else
                attempt=$((attempt + 1))
                echo "‚è≥ Attempt $attempt/$max_attempts - Backend not ready yet..."
                sleep 5
              fi
            done

            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Backend API health check failed!"
              echo "üìã Backend logs (last 50 lines):"
              docker logs ala-api-azure --tail=50
              exit 1
            fi

            # Frontend accessibility check
            echo "üîç Testing frontend accessibility..."
            if curl -f http://localhost:3000; then
              echo "‚úÖ Frontend is accessible"
            else
              echo "‚ùå Frontend is not accessible"
              echo "üìã Frontend logs (last 20 lines):"
              docker logs ala-frontend-azure --tail=20
              exit 1
            fi

            # Database connectivity check
            echo "üîç Testing database connectivity..."
            if docker exec ala-db-azure pg_isready -U ala_user -d ala_production; then
              echo "‚úÖ Database is accessible"
            else
              echo "‚ùå Database is not accessible"
              echo "üìã Database logs (last 20 lines):"
              docker logs ala-db-azure --tail=20
              exit 1
            fi

            # Test Priority API connectivity (if not mocked)
            echo "üîç Testing Priority API integration..."
            response=$(curl -s http://localhost:5000/api/priority/health || echo "failed")
            if echo "$response" | grep -q "OK\|success\|healthy"; then
              echo "‚úÖ Priority API integration is working"
            else
              echo "‚ö†Ô∏è Priority API integration may have issues: $response"
              echo "This might be expected in certain configurations"
            fi

            echo "üéâ Production deployment verification completed successfully!"
            echo "üìç Production URLs:"
            echo "   Frontend: http://${{ env.AZURE_VM_IP }}:3000"
            echo "   Backend API: http://${{ env.AZURE_VM_IP }}:5000/api"
            echo "   Health Check: http://${{ env.AZURE_VM_IP }}:5000/api/health"

  # =================================================================
  # Post-Deployment Summary and Monitoring Setup
  # =================================================================
  deployment-summary:
    name: Production Deployment Summary
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Create Deployment Summary
        run: |
          echo "## üè• Production Deployment Summary (Medical Application)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚ö†Ô∏è LIVE MEDICAL SYSTEM DEPLOYMENT**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "- Backup Created: ${{ !inputs.skip_backup && 'Yes' || 'SKIPPED' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ **Status:** DEPLOYMENT SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üîó Production URLs:**" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend: http://${{ env.AZURE_VM_IP }}:3000" >> $GITHUB_STEP_SUMMARY
            echo "- Backend API: http://${{ env.AZURE_VM_IP }}:5000/api" >> $GITHUB_STEP_SUMMARY
            echo "- Health Check: http://${{ env.AZURE_VM_IP }}:5000/api/health" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üìã Post-Deployment Checklist:**" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Monitor application logs for the next 30 minutes" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Test critical medical workflows" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Verify Priority API integration" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Confirm database connectivity and data integrity" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Notify medical staff of deployment completion" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Update deployment documentation" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** DEPLOYMENT FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üö® Emergency Actions Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Check deployment logs immediately" >> $GITHUB_STEP_SUMMARY
            echo "2. Consider emergency rollback if needed" >> $GITHUB_STEP_SUMMARY
            echo "3. Contact development team" >> $GITHUB_STEP_SUMMARY
            echo "4. Monitor production systems closely" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Rollback Command:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "./scripts/rollback.sh production --emergency" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          # Exit with error if deployment failed
          if [[ "${{ needs.deploy.result }}" != "success" ]]; then
            exit 1
          fi