#!/bin/bash
# =======================================================================
# Instant Rollback Script for Blue-Green Deployment
# =======================================================================
# Rolls back to the previous environment with zero downtime
#
# This script:
#   1. Determines current active environment
#   2. Starts the previous environment (if not running)
#   3. Switches traffic back to previous environment
#
# Usage: ./rollback [--force]
#   --force: Skip confirmation prompt
#
# Exit codes:
#   0 = Rollback successful
#   1 = Rollback failed
#   2 = User cancelled

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STATE_FILE="$SCRIPT_DIR/.current-env"
COMPOSE_FILE="$SCRIPT_DIR/docker-compose.bluegreen.yml"
FORCE=false

# Parse arguments
for arg in "$@"; do
    case $arg in
        --force)
            FORCE=true
            shift
            ;;
    esac
done

echo "========================================="
echo -e "${BLUE}ALA Deployment Rollback${NC}"
echo "========================================="
echo ""

# =======================================================================
# Step 1: Determine Current and Rollback Environments
# =======================================================================
echo -e "${YELLOW}[1/4] Determining rollback target...${NC}"

# Read current environment from state file
if [ ! -f "$STATE_FILE" ]; then
    echo -e "${RED}✗ No state file found${NC}"
    echo "Cannot determine current environment"
    exit 1
fi

CURRENT_ENV=$(cat "$STATE_FILE")

# Rollback target is the opposite of current
if [ "$CURRENT_ENV" = "blue" ]; then
    ROLLBACK_ENV="green"
else
    ROLLBACK_ENV="blue"
fi

echo "Current environment: $CURRENT_ENV"
echo "Rolling back to: $ROLLBACK_ENV"
echo ""

# Confirm rollback unless --force
if [ "$FORCE" = false ]; then
    echo "========================================="
    echo -e "${YELLOW}WARNING: This will switch all traffic${NC}"
    echo "From: $CURRENT_ENV"
    echo "To: $ROLLBACK_ENV"
    echo "========================================="
    echo ""
    read -p "Continue with rollback? [y/N]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Rollback cancelled"
        exit 2
    fi
    echo ""
fi

# =======================================================================
# Step 2: Start Rollback Environment (if not running)
# =======================================================================
echo -e "${YELLOW}[2/4] Ensuring $ROLLBACK_ENV environment is running...${NC}"

# Check if rollback environment containers are running
API_CONTAINER="ala-api-${ROLLBACK_ENV}"
FRONTEND_CONTAINER="ala-frontend-${ROLLBACK_ENV}"

if ! docker ps --format '{{.Names}}' | grep -q "^${API_CONTAINER}$"; then
    echo "Starting $ROLLBACK_ENV environment..."
    if [ "$ROLLBACK_ENV" = "blue" ]; then
        docker-compose -f "$COMPOSE_FILE" up -d api-blue frontend-blue
    else
        docker-compose -f "$COMPOSE_FILE" up -d api-green frontend-green
    fi

    # Wait for containers to be healthy
    echo "Waiting for $ROLLBACK_ENV to be healthy..."
    "$SCRIPT_DIR/scripts/health-check.sh" "$ROLLBACK_ENV" 120

    if [ $? -ne 0 ]; then
        echo -e "${RED}✗ $ROLLBACK_ENV environment failed health checks${NC}"
        echo "Cannot rollback to unhealthy environment"
        exit 1
    fi
else
    echo "$ROLLBACK_ENV environment already running"

    # Quick health check
    API_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' "$API_CONTAINER" 2>/dev/null || echo "none")
    FRONTEND_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' "$FRONTEND_CONTAINER" 2>/dev/null || echo "none")

    if [ "$API_HEALTH" != "healthy" ] || [ "$FRONTEND_HEALTH" != "healthy" ]; then
        echo -e "${YELLOW}⚠ $ROLLBACK_ENV environment not healthy, running full health check...${NC}"
        "$SCRIPT_DIR/scripts/health-check.sh" "$ROLLBACK_ENV" 120

        if [ $? -ne 0 ]; then
            echo -e "${RED}✗ Cannot rollback to unhealthy environment${NC}"
            exit 1
        fi
    fi
fi

echo -e "${GREEN}✓ $ROLLBACK_ENV environment ready${NC}"
echo ""

# =======================================================================
# Step 3: Switch Traffic
# =======================================================================
echo -e "${YELLOW}[3/4] Switching traffic to $ROLLBACK_ENV...${NC}"

"$SCRIPT_DIR/scripts/switch-traffic.sh" "$ROLLBACK_ENV"

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Traffic switch failed${NC}"
    exit 1
fi

echo ""

# =======================================================================
# Step 4: Optional - Stop Failed Environment
# =======================================================================
echo -e "${YELLOW}[4/4] Managing $CURRENT_ENV environment...${NC}"

if [ "$FORCE" = false ]; then
    read -p "Stop $CURRENT_ENV environment? [Y/n]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo "Keeping $CURRENT_ENV running (for troubleshooting)"
    else
        if [ "$CURRENT_ENV" = "blue" ]; then
            docker-compose -f "$COMPOSE_FILE" stop api-blue frontend-blue
        else
            docker-compose -f "$COMPOSE_FILE" stop api-green frontend-green
        fi
        echo -e "${GREEN}✓ $CURRENT_ENV environment stopped${NC}"
    fi
else
    echo "Keeping $CURRENT_ENV running (use --force to auto-stop)"
fi

echo ""

# =======================================================================
# Summary
# =======================================================================
echo "========================================="
echo -e "${GREEN}✓ Rollback Complete!${NC}"
echo "========================================="
echo ""
echo "Traffic switched from $CURRENT_ENV → $ROLLBACK_ENV"
echo "Application is now serving from $ROLLBACK_ENV environment"
echo ""
echo "Next steps:"
echo "1. Verify application is working correctly"
echo "2. Investigate issues in $CURRENT_ENV environment"
echo "3. When ready, deploy again with: ./deploy-zero-downtime"
echo ""

exit 0
