#!/bin/bash
# =======================================================================
# Zero-Downtime Deployment Script for ALA Medical Application
# =======================================================================
# Implements simplified blue-green deployment pattern
#
# This script:
#   1. Determines current active environment (blue or green)
#   2. Deploys new version to inactive environment
#   3. Runs health checks and smoke tests
#   4. Switches traffic with zero downtime
#   5. Stops old environment
#
# Usage: ./deploy-zero-downtime [--skip-tests] [--auto-switch]
#   --skip-tests: Skip smoke tests (not recommended for production)
#   --auto-switch: Automatically switch traffic after tests pass (no confirmation)
#
# Exit codes:
#   0 = Deployment successful
#   1 = Deployment failed
#   2 = User cancelled

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STATE_FILE="$SCRIPT_DIR/.current-env"
COMPOSE_FILE="$SCRIPT_DIR/docker-compose.bluegreen.yml"
SKIP_TESTS=false
AUTO_SWITCH=false

# Parse arguments
for arg in "$@"; do
    case $arg in
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        --auto-switch)
            AUTO_SWITCH=true
            shift
            ;;
    esac
done

echo "========================================="
echo -e "${BLUE}ALA Zero-Downtime Deployment${NC}"
echo "========================================="
echo ""

# =======================================================================
# Step 1: Determine Current and Target Environments
# =======================================================================
echo -e "${YELLOW}[1/8] Determining deployment target...${NC}"

# Read current environment from state file
if [ -f "$STATE_FILE" ]; then
    CURRENT_ENV=$(cat "$STATE_FILE")
else
    # First deployment - check which containers are running
    if docker ps --format '{{.Names}}' | grep -q 'ala-api-blue'; then
        CURRENT_ENV="blue"
    elif docker ps --format '{{.Names}}' | grep -q 'ala-api-green'; then
        CURRENT_ENV="green"
    else
        # No environment running - default to blue as current, deploy to green
        CURRENT_ENV="blue"
        echo "blue" > "$STATE_FILE"
    fi
fi

# Target is the opposite of current
if [ "$CURRENT_ENV" = "blue" ]; then
    TARGET_ENV="green"
else
    TARGET_ENV="blue"
fi

echo "Current environment: $CURRENT_ENV"
echo "Target environment: $TARGET_ENV"
echo ""

# =======================================================================
# Step 2: Backup Database
# =======================================================================
echo -e "${YELLOW}[2/8] Backing up database...${NC}"

BACKUP_FILE="$SCRIPT_DIR/backups/db-backup-$(date +%Y%m%d-%H%M%S).sql"
mkdir -p "$SCRIPT_DIR/backups"

# Check if db container is running
if ! docker ps --format '{{.Names}}' | grep -q 'ala-db'; then
    echo -e "${YELLOW}⚠ Database container not running, skipping backup${NC}"
else
    docker exec ala-db pg_dump -U "${POSTGRES_USER:-ala_user}" "${POSTGRES_DB:-ala_production}" > "$BACKUP_FILE"

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Database backed up to: $BACKUP_FILE${NC}"
        # Keep only last 5 backups
        ls -t "$SCRIPT_DIR/backups"/db-backup-*.sql | tail -n +6 | xargs rm -f 2>/dev/null || true
    else
        echo -e "${RED}✗ Database backup failed${NC}"
        exit 1
    fi
fi

echo ""

# =======================================================================
# Step 3: Pull Latest Code
# =======================================================================
echo -e "${YELLOW}[3/8] Pulling latest code...${NC}"

cd "$SCRIPT_DIR/.."
git pull

echo -e "${GREEN}✓ Code updated${NC}"
echo ""

# =======================================================================
# Step 4: Build and Start Target Environment
# =======================================================================
echo -e "${YELLOW}[4/8] Building and starting $TARGET_ENV environment...${NC}"

# Ensure proxy and database are running
docker-compose -f "$COMPOSE_FILE" up -d proxy db

# Build and start target environment
if [ "$TARGET_ENV" = "blue" ]; then
    docker-compose -f "$COMPOSE_FILE" build --no-cache api-blue frontend-blue
    docker-compose -f "$COMPOSE_FILE" up -d api-blue frontend-blue
else
    docker-compose -f "$COMPOSE_FILE" build --no-cache api-green frontend-green
    docker-compose -f "$COMPOSE_FILE" up -d api-green frontend-green
fi

echo -e "${GREEN}✓ $TARGET_ENV environment started${NC}"
echo ""

# =======================================================================
# Step 5: Run Health Checks
# =======================================================================
echo -e "${YELLOW}[5/8] Running health checks on $TARGET_ENV...${NC}"

"$SCRIPT_DIR/scripts/health-check.sh" "$TARGET_ENV" 120

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Health checks failed${NC}"
    echo "Keeping $CURRENT_ENV environment active"
    exit 1
fi

echo ""

# =======================================================================
# Step 6: Run Smoke Tests
# =======================================================================
if [ "$SKIP_TESTS" = false ]; then
    echo -e "${YELLOW}[6/8] Running smoke tests on $TARGET_ENV...${NC}"

    "$SCRIPT_DIR/scripts/smoke-test.sh" "$TARGET_ENV"

    if [ $? -ne 0 ]; then
        echo -e "${RED}✗ Smoke tests failed${NC}"
        echo "Keeping $CURRENT_ENV environment active"
        echo ""
        read -p "Do you want to continue anyway? [y/N]: " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
else
    echo -e "${YELLOW}[6/8] Smoke tests skipped (--skip-tests flag)${NC}"
fi

echo ""

# =======================================================================
# Step 7: Switch Traffic
# =======================================================================
echo -e "${YELLOW}[7/8] Ready to switch traffic to $TARGET_ENV${NC}"

if [ "$AUTO_SWITCH" = false ]; then
    echo ""
    echo "========================================="
    echo -e "${GREEN}All tests passed!${NC}"
    echo "Current traffic: $CURRENT_ENV"
    echo "New deployment: $TARGET_ENV (tested and ready)"
    echo "========================================="
    echo ""
    read -p "Switch traffic to $TARGET_ENV? [y/N]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Deployment cancelled. $TARGET_ENV environment remains running but not serving traffic."
        echo "You can manually switch later with: ./scripts/switch-traffic.sh $TARGET_ENV"
        exit 2
    fi
fi

"$SCRIPT_DIR/scripts/switch-traffic.sh" "$TARGET_ENV"

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Traffic switch failed${NC}"
    exit 1
fi

echo ""

# =======================================================================
# Step 8: Stop Old Environment
# =======================================================================
echo -e "${YELLOW}[8/8] Stopping $CURRENT_ENV environment...${NC}"

if [ "$CURRENT_ENV" = "blue" ]; then
    docker-compose -f "$COMPOSE_FILE" stop api-blue frontend-blue
else
    docker-compose -f "$COMPOSE_FILE" stop api-green frontend-green
fi

echo -e "${GREEN}✓ $CURRENT_ENV environment stopped${NC}"
echo ""

# =======================================================================
# Summary
# =======================================================================
echo "========================================="
echo -e "${GREEN}✓ Deployment Complete!${NC}"
echo "========================================="
echo ""
echo "Traffic switched from $CURRENT_ENV → $TARGET_ENV"
echo "Old environment ($CURRENT_ENV) has been stopped"
echo "New environment ($TARGET_ENV) is now serving all traffic"
echo ""
echo "For instant rollback, run: ./rollback"
echo ""

exit 0
