#!/bin/bash
# ======================================================================
# ALA Medical Application - Promote Staging to Production
# ======================================================================
# Promote staging-tested images to production WITHOUT REBUILD
#
# Usage: ./promote-to-production
#
# This script:
# 1. Confirms you want to deploy to PRODUCTION
# 2. Tags staging images as production images
# 3. Restarts production with promoted images
# 4. Verifies production health
#
# Benefits:
# - 30 second deployment (no rebuild time!)
# - Guaranteed identical code (exact staging-tested binary)
# - Less risk (if staging works, production works)

set -euo pipefail

# ======================================================================
# Configuration
# ======================================================================
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
BACKUP_DIR="$PROJECT_ROOT/backups"
BACKUP_FILE="$BACKUP_DIR/backup-pre-promotion-$(date +%Y%m%d-%H%M%S).sql"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# ======================================================================
# Helper Functions
# ======================================================================
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*"
}

success() {
    echo -e "${GREEN}✅ $*${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $*${NC}"
}

error() {
    echo -e "${RED}❌ $*${NC}"
}

# ======================================================================
# Confirmation
# ======================================================================
confirm_production_deployment() {
    echo ""
    echo "═══════════════════════════════════════════════════════════"
    echo "⚠️   PRODUCTION DEPLOYMENT - Image Promotion"
    echo "═══════════════════════════════════════════════════════════"
    echo ""
    echo "  This will:"
    echo "  1. Promote staging-tested images to production"
    echo "  2. Deploy to PRODUCTION (https://ala-app.israelcentral.cloudapp.azure.com)"
    echo "  3. Restart production services with new images"
    echo ""
    echo "  ✅ Benefits:"
    echo "  - Fast deployment (30 seconds, no rebuild)"
    echo "  - Same code tested in staging"
    echo "  - Automatic rollback if health checks fail"
    echo ""
    warning "This affects REAL PATIENTS and LIVE DATA"
    echo ""
    read -p "Type 'yes' to confirm production deployment: " confirm

    if [ "$confirm" != "yes" ]; then
        echo ""
        error "Deployment cancelled"
        exit 0
    fi
}

# ======================================================================
# Main Promotion
# ======================================================================
main() {
    cd "$SCRIPT_DIR"

    # Confirm deployment
    confirm_production_deployment

    echo ""
    log "Starting production promotion..."

    # Check prerequisites
    log "Checking prerequisites..."
    command -v docker >/dev/null 2>&1 || { error "Docker not found"; exit 1; }
    command -v docker-compose >/dev/null 2>&1 || { error "docker-compose not found"; exit 1; }
    [ -f .env ] || { error ".env file not found"; exit 1; }

    # Check staging images exist
    if ! docker images | grep -q "ala-api.*staging"; then
        error "Staging images not found. Run ./deploy-staging first"
        exit 1
    fi
    success "Prerequisites OK"

    # Create backup directory
    mkdir -p "$BACKUP_DIR"

    # Backup database
    log "Backing up production database..."
    if docker-compose exec -T db pg_dump -U "${POSTGRES_USER:-ala_user}" "${POSTGRES_DB:-ala_production}" > "$BACKUP_FILE" 2>/dev/null; then
        success "Backup saved: $BACKUP_FILE ($(du -h "$BACKUP_FILE" | cut -f1))"
    else
        warning "Database backup failed (container may not be running)"
        touch "$BACKUP_FILE"
    fi

    # Tag staging images as production
    log "Promoting staging images to production..."
    docker tag ala-api:staging ala-api:production
    docker tag ala-frontend:staging ala-frontend:production
    success "Images tagged as production"

    # Restart production with promoted images
    log "Restarting production services..."
    docker-compose down
    docker-compose up -d

    # Wait for health checks
    log "Waiting for health checks (60s)..."
    sleep 60

    # Verify deployment
    log "Verifying production deployment..."

    if curl -f -s http://localhost:5000/api/health > /dev/null 2>&1; then
        success "Backend healthy"
    else
        error "Backend unhealthy - Rolling back..."
        rollback "$BACKUP_FILE"
        exit 1
    fi

    if curl -f -s http://localhost:80 > /dev/null 2>&1 || curl -f -s http://localhost:8080 > /dev/null 2>&1; then
        success "Frontend healthy"
    else
        warning "Frontend check failed (non-critical, may be nginx port config)"
    fi

    # Success!
    echo ""
    success "🎉 Production deployment successful!"
    echo ""
    echo "  ✅ Production Environment"
    echo "  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "  Frontend: https://ala-app.israelcentral.cloudapp.azure.com"
    echo "  Backend:  http://$(hostname -I | awk '{print $1}'):5000/api"
    echo "  Health:   http://$(hostname -I | awk '{print $1}'):5000/api/health"
    echo ""
    echo "  📦 Deployed images: staging-tested (promoted)"
    echo "  ⏱️  Deployment time: ~30 seconds (no rebuild!)"
    echo "  💾 Backup: $BACKUP_FILE"
    echo ""
    echo "Monitor logs: cd $SCRIPT_DIR && docker-compose logs -f"
    echo ""

    # Keep only last 10 backups
    log "Cleaning up old backups..."
    cd "$BACKUP_DIR" && ls -t backup-*.sql 2>/dev/null | tail -n +11 | xargs -r rm
}

# ======================================================================
# Rollback Function
# ======================================================================
rollback() {
    local backup_file=$1

    error "Deployment failed - initiating rollback"

    cd "$SCRIPT_DIR"
    docker-compose down

    if [ -f "$backup_file" ] && [ -s "$backup_file" ]; then
        log "Restoring database from backup..."
        docker-compose up -d db
        sleep 10
        cat "$backup_file" | docker-compose exec -T db psql -U "${POSTGRES_USER:-ala_user}" "${POSTGRES_DB:-ala_production}"
    fi

    docker-compose up -d
    error "Rolled back to previous version"
}

# ======================================================================
# Execute
# ======================================================================
main "$@"
