version: '3.8'

# ======================================================================
# ALA Medical Application - Blue-Green Deployment
# ======================================================================
# This compose file implements blue-green deployment with nginx proxy
#
# Usage:
#   ./deploy-zero-downtime    # Deploy to inactive environment and switch
#   ./rollback                # Roll back to previous environment
#
# Environment: Configure via .env file (see .env.production.template)

services:
  # ===================================================================
  # Nginx Reverse Proxy (Always Running)
  # ===================================================================
  # This proxy sits in front of blue/green environments and switches
  # traffic between them with zero downtime
  proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: ala-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # SSL certificates
      - ../ssl-certs/certs:/etc/ssl/certs:ro
      - ../ssl-certs/private:/etc/ssl/private:ro
      # Let's Encrypt challenges
      - ./certbot/www:/var/www/certbot:ro
      # Allow runtime config updates for traffic switching
      - ./nginx:/etc/nginx/conf.d:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ===================================================================
  # PostgreSQL Database (Shared by both blue and green)
  # ===================================================================
  # Single database instance used by both environments
  # This enables expand-contract migration pattern for zero-downtime schema changes
  db:
    image: postgres:15-alpine
    container_name: ala-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ala_production}
      POSTGRES_USER: ${POSTGRES_USER:-ala_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    # Database secured - no external port exposure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-ala_user}", "-d", "${POSTGRES_DB:-ala_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ===================================================================
  # BLUE Environment - Backend API
  # ===================================================================
  api-blue:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: ala-api-blue
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: production
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET}
      PRIORITY_API_URL: ${PRIORITY_API_URL}
      PRIORITY_API_USERNAME: ${PRIORITY_API_USERNAME}
      PRIORITY_API_PASSWORD: ${PRIORITY_API_PASSWORD}
      PRIORITY_API_COMPANY: ${PRIORITY_API_COMPANY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      USE_HTTPS: ${USE_HTTPS}
      DOMAIN: ${DOMAIN}
      ENABLE_TEST_DATA: ${ENABLE_TEST_DATA}
      ENVIRONMENT_NAME: blue  # Identifies this as blue environment
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    # No external port exposure - traffic goes through proxy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================================================================
  # BLUE Environment - Frontend
  # ===================================================================
  frontend-blue:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_URL=${VITE_API_URL}
        - NGINX_CONFIG=${NGINX_CONFIG:-nginx.https.azure.conf}
    container_name: ala-frontend-blue
    restart: always
    environment:
      ENVIRONMENT_NAME: blue  # Identifies this as blue environment
    depends_on:
      api-blue:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      # SSL certificates for internal nginx
      - ../ssl-certs/certs:/etc/ssl/certs:ro
      - ../ssl-certs/private:/etc/ssl/private:ro
    # No external port exposure - traffic goes through proxy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===================================================================
  # GREEN Environment - Backend API
  # ===================================================================
  api-green:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: ala-api-green
    restart: "no"  # Start manually during deployment
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: production
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET}
      PRIORITY_API_URL: ${PRIORITY_API_URL}
      PRIORITY_API_USERNAME: ${PRIORITY_API_USERNAME}
      PRIORITY_API_PASSWORD: ${PRIORITY_API_PASSWORD}
      PRIORITY_API_COMPANY: ${PRIORITY_API_COMPANY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      USE_HTTPS: ${USE_HTTPS}
      DOMAIN: ${DOMAIN}
      ENABLE_TEST_DATA: ${ENABLE_TEST_DATA}
      ENVIRONMENT_NAME: green  # Identifies this as green environment
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    # No external port exposure - traffic goes through proxy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================================================================
  # GREEN Environment - Frontend
  # ===================================================================
  frontend-green:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_URL=${VITE_API_URL}
        - NGINX_CONFIG=${NGINX_CONFIG:-nginx.https.azure.conf}
    container_name: ala-frontend-green
    restart: "no"  # Start manually during deployment
    environment:
      ENVIRONMENT_NAME: green  # Identifies this as green environment
    depends_on:
      api-green:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      # SSL certificates for internal nginx
      - ../ssl-certs/certs:/etc/ssl/certs:ro
      - ../ssl-certs/private:/etc/ssl/private:ro
    # No external port exposure - traffic goes through proxy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# ======================================================================
# Networks
# ======================================================================
networks:
  app-network:
    driver: bridge

# ======================================================================
# Volumes
# ======================================================================
volumes:
  postgres-data:
    driver: local
