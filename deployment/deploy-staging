#!/bin/bash
# ======================================================================
# ALA Medical Application - Staging Deployment
# ======================================================================
# Deploy to staging environment for testing before production
#
# Usage: ./deploy-staging
#
# This script:
# 1. Pulls latest code from current branch
# 2. Builds staging images with parallel builds
# 3. Tags images as 'staging' and 'staging-tested-TIMESTAMP'
# 4. Deploys to staging ports (8080/5010/5433)
# 5. Verifies health checks
#
# After successful staging tests, promote to production with:
#   ./promote-to-production

set -euo pipefail

# ======================================================================
# Configuration
# ======================================================================
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# ======================================================================
# Helper Functions
# ======================================================================
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*"
}

success() {
    echo -e "${GREEN}✅ $*${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $*${NC}"
}

error() {
    echo -e "${RED}❌ $*${NC}"
}

# ======================================================================
# Main Deployment
# ======================================================================
main() {
    cd "$SCRIPT_DIR"

    echo ""
    echo "🧪 ═══════════════════════════════════════════════════════════"
    echo "🧪  STAGING DEPLOYMENT - Test Environment Only"
    echo "🧪 ═══════════════════════════════════════════════════════════"
    echo ""

    # Check prerequisites
    log "Checking prerequisites..."
    command -v docker >/dev/null 2>&1 || { error "Docker not found"; exit 1; }
    command -v docker-compose >/dev/null 2>&1 || { error "docker-compose not found"; exit 1; }
    [ -f .env.staging ] || {
        warning ".env.staging not found. Using .env instead."
        warning "For staging-specific config, create .env.staging from .env.staging.template"
    }
    success "Prerequisites OK"

    # Pull latest code from current branch
    log "Pulling latest code from current branch..."
    current_branch=$(git branch --show-current)
    log "Current branch: $current_branch"
    cd "$PROJECT_ROOT" && git pull origin "$current_branch"
    cd "$SCRIPT_DIR"
    success "Code updated"

    # Build staging images with parallel builds for speed
    log "Building staging images (parallel build)..."
    docker-compose -f docker-compose.yml -f docker-compose.staging.yml build --parallel
    success "Images built"

    # Tag images for promotion workflow
    log "Tagging images..."
    docker tag ala-api:staging ala-api:staging-tested-$TIMESTAMP
    docker tag ala-frontend:staging ala-frontend:staging-tested-$TIMESTAMP
    success "Images tagged: staging-tested-$TIMESTAMP"

    # Deploy to staging
    log "Starting staging containers..."
    docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
    success "Containers started"

    # Wait for health checks
    log "Waiting for health checks (60s)..."
    sleep 60

    # Verify deployment
    log "Verifying staging deployment..."

    if curl -f -s http://localhost:5010/api/health > /dev/null 2>&1; then
        success "Backend healthy (port 5010)"
    else
        error "Backend unhealthy on port 5010"
        warning "Check logs: docker-compose -f docker-compose.yml -f docker-compose.staging.yml logs api"
        exit 1
    fi

    if curl -f -s http://localhost:8080 > /dev/null 2>&1; then
        success "Frontend healthy (port 8080)"
    else
        warning "Frontend check failed on port 8080"
        warning "Check logs: docker-compose -f docker-compose.yml -f docker-compose.staging.yml logs frontend"
    fi

    # Success!
    echo ""
    success "🎉 Staging deployment successful!"
    echo ""
    echo "  🧪 Staging Environment"
    echo "  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "  Frontend:  http://$(hostname -I | awk '{print $1}'):8080"
    echo "  Backend:   http://$(hostname -I | awk '{print $1}'):5010/api"
    echo "  Health:    http://$(hostname -I | awk '{print $1}'):5010/api/health"
    echo "  Database:  localhost:5433 (staging-only)"
    echo ""
    echo "  📦 Images tagged as: staging-tested-$TIMESTAMP"
    echo ""
    echo "  Next steps:"
    echo "  1. Test staging at http://$(hostname -I | awk '{print $1}'):8080"
    echo "  2. Login as test@example.com (code: 123456)"
    echo "  3. If tests pass, promote to production:"
    echo "     ./promote-to-production"
    echo ""
    echo "  Monitor logs:"
    echo "  docker-compose -f docker-compose.yml -f docker-compose.staging.yml logs -f"
    echo ""
}

# ======================================================================
# Execute
# ======================================================================
main "$@"
