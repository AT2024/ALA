#!/bin/bash
# =======================================================================
# Blue-Green Deployment Initialization Script
# =======================================================================
# Sets up blue-green deployment infrastructure for the first time
#
# This script:
#   1. Ensures .env file exists with all required variables
#   2. Starts database and proxy
#   3. Deploys to blue environment (initial deployment)
#   4. Creates state file marking blue as active
#
# Usage: ./init-bluegreen
#
# Exit codes:
#   0 = Initialization successful
#   1 = Initialization failed

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STATE_FILE="$SCRIPT_DIR/.current-env"
COMPOSE_FILE="$SCRIPT_DIR/docker-compose.bluegreen.yml"
ENV_FILE="$SCRIPT_DIR/.env"
ENV_TEMPLATE="$SCRIPT_DIR/.env.production.template"

echo "========================================="
echo -e "${BLUE}Blue-Green Deployment Initialization${NC}"
echo "========================================="
echo ""

# =======================================================================
# Step 1: Check Prerequisites
# =======================================================================
echo -e "${YELLOW}[1/6] Checking prerequisites...${NC}"

# Check if .env file exists
if [ ! -f "$ENV_FILE" ]; then
    echo -e "${YELLOW}⚠ .env file not found${NC}"
    if [ -f "$ENV_TEMPLATE" ]; then
        echo "Creating .env from template..."
        cp "$ENV_TEMPLATE" "$ENV_FILE"
        echo -e "${RED}Please edit $ENV_FILE and fill in your secrets${NC}"
        echo "Required variables:"
        echo "  - POSTGRES_PASSWORD"
        echo "  - JWT_SECRET"
        echo "  - PRIORITY_API_* (API credentials)"
        exit 1
    else
        echo -e "${RED}✗ No .env.production.template found${NC}"
        exit 1
    fi
fi

# Check if required variables are set (not empty)
source "$ENV_FILE"
if [ -z "$POSTGRES_PASSWORD" ] || [ -z "$JWT_SECRET" ]; then
    echo -e "${RED}✗ Required environment variables not set in .env${NC}"
    echo "Please ensure POSTGRES_PASSWORD and JWT_SECRET are configured"
    exit 1
fi

echo -e "${GREEN}✓ Prerequisites met${NC}"
echo ""

# =======================================================================
# Step 2: Check if Already Initialized
# =======================================================================
echo -e "${YELLOW}[2/6] Checking existing deployment...${NC}"

if [ -f "$STATE_FILE" ]; then
    EXISTING_ENV=$(cat "$STATE_FILE")
    echo -e "${YELLOW}⚠ Blue-green deployment already initialized${NC}"
    echo "Current active environment: $EXISTING_ENV"
    echo ""
    read -p "Re-initialize? This will redeploy to blue environment [y/N]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Initialization cancelled"
        exit 0
    fi
fi

echo -e "${GREEN}✓ Ready to initialize${NC}"
echo ""

# =======================================================================
# Step 3: Start Core Infrastructure
# =======================================================================
echo -e "${YELLOW}[3/6] Starting core infrastructure (database and proxy)...${NC}"

docker-compose -f "$COMPOSE_FILE" up -d db proxy

# Wait for database to be healthy
echo "Waiting for database..."
sleep 5

DB_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' ala-db 2>/dev/null || echo "none")
attempt=0
while [ "$DB_HEALTH" != "healthy" ] && [ $attempt -lt 30 ]; do
    sleep 2
    DB_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' ala-db 2>/dev/null || echo "none")
    attempt=$((attempt + 1))
done

if [ "$DB_HEALTH" != "healthy" ]; then
    echo -e "${RED}✗ Database failed to become healthy${NC}"
    exit 1
fi

echo -e "${GREEN}✓ Core infrastructure ready${NC}"
echo ""

# =======================================================================
# Step 4: Deploy to Blue Environment
# =======================================================================
echo -e "${YELLOW}[4/6] Deploying to blue environment...${NC}"

docker-compose -f "$COMPOSE_FILE" build --no-cache api-blue frontend-blue
docker-compose -f "$COMPOSE_FILE" up -d api-blue frontend-blue

echo -e "${GREEN}✓ Blue environment started${NC}"
echo ""

# =======================================================================
# Step 5: Run Health Checks
# =======================================================================
echo -e "${YELLOW}[5/6] Running health checks...${NC}"

"$SCRIPT_DIR/scripts/health-check.sh" blue 180

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Health checks failed${NC}"
    exit 1
fi

echo ""

# =======================================================================
# Step 6: Activate Blue Environment
# =======================================================================
echo -e "${YELLOW}[6/6] Activating blue environment...${NC}"

# Switch traffic to blue
"$SCRIPT_DIR/scripts/switch-traffic.sh" blue

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Failed to activate blue environment${NC}"
    exit 1
fi

# Mark blue as active
echo "blue" > "$STATE_FILE"

echo ""

# =======================================================================
# Summary
# =======================================================================
echo "========================================="
echo -e "${GREEN}✓ Initialization Complete!${NC}"
echo "========================================="
echo ""
echo "Blue-green deployment is now active"
echo "Active environment: blue"
echo ""
echo "Next steps:"
echo "1. Verify application at: https://ala-app.israelcentral.cloudapp.azure.com"
echo "2. For future deployments: ./deploy-zero-downtime"
echo "3. For instant rollback: ./rollback"
echo ""
echo "System status:"
echo "  - Database: Running (shared by both environments)"
echo "  - Proxy: Running (handles traffic switching)"
echo "  - Blue: Running and serving traffic"
echo "  - Green: Stopped (ready for next deployment)"
echo ""

exit 0
