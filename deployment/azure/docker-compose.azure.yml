# =================================================================
# ALA Application - Azure Production Deployment Configuration
# =================================================================
# Unified Azure deployment file supporting both HTTP and HTTPS
# Usage:
#   HTTP:  docker-compose -f docker-compose.azure.yml --env-file .env.azure up -d
#   HTTPS: docker-compose -f docker-compose.azure.yml --env-file .env.azure.https up -d
#
# Features:
# - Automatic HTTP/HTTPS configuration via environment variables
# - Production-ready security settings
# - Azure VM optimized configuration
# - Persistent data volume
# - Health monitoring

services:
  # =================================================================
  # Backend API - Azure Production
  # =================================================================
  api:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: production
    container_name: ala-api-azure
    env_file:
      - .env.azure
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - PRIORITY_MOCK=false
      - DATABASE_URL=${DATABASE_URL}
      - ENABLE_TEST_DATA=true
      - BYPASS_PRIORITY_EMAILS=test@example.com
      # HTTPS Configuration (controlled by env file)
      - USE_HTTPS=${USE_HTTPS:-false}
      - DOMAIN=${DOMAIN:-20.217.84.100}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://20.217.84.100:3000}
      - HSTS_ENABLED=${HSTS_ENABLED:-false}
      - HSTS_MAX_AGE=${HSTS_MAX_AGE:-31536000}
      - TRUST_PROXY=${TRUST_PROXY:-false}
    ports:
      - "5000:5000"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/api/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    labels:
      - "ala.service=api"
      - "ala.version=production"
      - "ala.recovery=auto"
    networks:
      - ala-network

  # =================================================================
  # Frontend Application - Azure Production
  # =================================================================
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_URL=${VITE_API_URL:-http://20.217.84.100:5000/api}
        - VITE_ENVIRONMENT=production
        - VITE_PRIORITY_API_URL=${VITE_PRIORITY_API_URL}
        - VITE_OFFLINE_STORAGE=true
        - VITE_USE_HTTPS=${VITE_USE_HTTPS:-false}
        - NGINX_CONFIG=${NGINX_CONFIG:-nginx.staging.conf}
    container_name: ala-frontend-azure
    env_file:
      - .env.azure
    environment:
      - NODE_ENV=production
    ports:
      # Dynamic port mapping based on USE_HTTPS
      # HTTP mode:  80:80,   443:443
      # HTTPS mode: 80:8080, 443:8443 (nginx uses non-privileged ports internally)
      - "${HTTP_PORT:-80}:${NGINX_HTTP_PORT:-80}"
      - "${HTTPS_PORT:-443}:${NGINX_HTTPS_PORT:-443}"
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${NGINX_HTTP_PORT:-80}/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      # SSL certificates (only used when USE_HTTPS=true)
      - ../../ssl-certs/certs:/etc/ssl/certs:ro
      - ../../ssl-certs/private:/etc/ssl/private:ro
      # Nginx config selection based on USE_HTTPS
      # HTTP:  nginx.azure.conf
      # HTTPS: nginx.https.azure.conf
      # NOTE: Nginx config is baked into Docker image via Dockerfile COPY, not mounted
      # - ../../frontend/${NGINX_CONFIG:-nginx.azure.conf}:/etc/nginx/conf.d/default.conf:ro
    labels:
      - "ala.service=frontend"
      - "ala.version=production"
      - "ala.recovery=auto"
      - "ala.https=${USE_HTTPS:-false}"
    networks:
      - ala-network

  # =================================================================
  # PostgreSQL Database - Azure Production
  # =================================================================
  db:
    image: postgres:16.6-alpine
    container_name: ala-db-azure
    env_file:
      - .env.azure
    environment:
      - POSTGRES_DB=ala_production
      - POSTGRES_USER=ala_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ala-postgres-data-prod:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ala_user -d ala_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      ala-network:
        aliases:
          - db
    labels:
      - "ala.service=database"
      - "ala.version=production"
      - "ala.recovery=critical"

# =================================================================
# Networks
# =================================================================
networks:
  ala-network:
    name: azure_ala-network
    external: true

# =================================================================
# Volumes
# =================================================================
volumes:
  ala-postgres-data-prod:
    name: azure_ala-postgres-data-prod
    external: true
