# =================================================================
# ALA Application - Azure HTTPS Production Deployment
# =================================================================
# This file enables HTTPS/SSL for Azure VM production deployment
# Usage: docker-compose -f docker-compose.https.azure.yml --env-file .env.azure up -d
#
# Prerequisites:
# - SSL certificates copied to ~/ala-improved/ssl-certs/
# - .env.azure configured with USE_HTTPS=true
#
# Features:
# - HTTPS on port 443 with SSL termination
# - HTTP to HTTPS redirect on port 80
# - Security-hardened SSL settings
# - HSTS headers enabled

services:
  # =================================================================
  # Backend API - Azure Production with HTTPS
  # =================================================================
  api:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: production
    container_name: ala-api-azure
    env_file:
      - .env.azure
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - PRIORITY_MOCK=false
      - DATABASE_URL=${DATABASE_URL}
      - ENABLE_TEST_DATA=true
      - BYPASS_PRIORITY_EMAILS=test@example.com
      # HTTPS Configuration
      - USE_HTTPS=true
      - DOMAIN=${DOMAIN:-20.217.84.100}
      - CORS_ORIGIN=https://20.217.84.100
      - HSTS_ENABLED=true
      - HSTS_MAX_AGE=${HSTS_MAX_AGE:-31536000}
    ports:
      - "5000:5000"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/api/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    labels:
      - "ala.service=api"
      - "ala.version=production-https"
      - "ala.recovery=auto"
    networks:
      - ala-network

  # =================================================================
  # Frontend Application - Azure Production with HTTPS
  # =================================================================
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_URL=https://20.217.84.100/api
        - VITE_ENVIRONMENT=production
        - VITE_PRIORITY_API_URL=${VITE_PRIORITY_API_URL}
        - VITE_OFFLINE_STORAGE=true
        - VITE_USE_HTTPS=true
    container_name: ala-frontend-azure
    env_file:
      - .env.azure
    environment:
      - NODE_ENV=production
    ports:
      - "80:80"    # HTTP (will redirect to HTTPS)
      - "443:443"  # HTTPS
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      # SSL certificates for HTTPS support
      - ../../ssl-certs/certs:/etc/ssl/certs:ro
      - ../../ssl-certs/private:/etc/ssl/private:ro
      # Use HTTPS nginx configuration
      - ../../frontend/nginx.https.conf:/etc/nginx/conf.d/default.conf:ro
    labels:
      - "ala.service=frontend"
      - "ala.version=production-https"
      - "ala.recovery=auto"
    networks:
      - ala-network

  # =================================================================
  # PostgreSQL Database - Azure Production
  # =================================================================
  db:
    image: postgres:16.6-alpine
    container_name: ala-db-azure
    env_file:
      - .env.azure
    environment:
      - POSTGRES_DB=ala_production
      - POSTGRES_USER=ala_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ala-postgres-data-prod:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ala_user -d ala_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      ala-network:
        aliases:
          - db
    labels:
      - "ala.service=database"
      - "ala.version=production"
      - "ala.recovery=critical"

# =================================================================
# Networks
# =================================================================
networks:
  ala-network:
    name: azure_ala-network
    external: true

# =================================================================
# Volumes
# =================================================================
volumes:
  ala-postgres-data-prod:
    name: azure_ala-postgres-data-prod
    external: true