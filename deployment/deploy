#!/bin/bash
# ======================================================================
# ALA Medical Application - Production Deployment
# ======================================================================
# Because deployment should be boring
#
# Usage: ./deploy
#
# This script:
# 1. Backs up the database
# 2. Deploys new version
# 3. Verifies health
# 4. Rolls back if anything fails

set -euo pipefail

# ======================================================================
# Configuration
# ======================================================================
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
BACKUP_DIR="$PROJECT_ROOT/backups"
BACKUP_FILE="$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).sql"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# ======================================================================
# Helper Functions
# ======================================================================
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*"
}

success() {
    echo -e "${GREEN}✅ $*${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $*${NC}"
}

error() {
    echo -e "${RED}❌ $*${NC}"
}

# ======================================================================
# Main Deployment
# ======================================================================
main() {
    cd "$SCRIPT_DIR"

    # Check prerequisites
    log "Checking prerequisites..."
    command -v docker >/dev/null 2>&1 || { error "Docker not found"; exit 1; }
    command -v docker-compose >/dev/null 2>&1 || { error "docker-compose not found"; exit 1; }
    [ -f .env ] || { error ".env file not found. Copy from .env.production.template"; exit 1; }
    success "Prerequisites OK"

    # Create backup directory
    mkdir -p "$BACKUP_DIR"

    # Backup database
    log "Backing up database..."
    if docker-compose exec -T db pg_dump -U "${POSTGRES_USER:-ala_user}" "${POSTGRES_DB:-ala_production}" > "$BACKUP_FILE" 2>/dev/null; then
        success "Backup saved: $BACKUP_FILE ($(du -h "$BACKUP_FILE" | cut -f1))"
    else
        warning "Database backup failed (container may not be running yet)"
        touch "$BACKUP_FILE"  # Create empty backup file
    fi

    # Deploy new version
    log "Deploying new version..."
    log "  Pulling latest code..."
    cd "$PROJECT_ROOT" && git pull origin main

    cd "$SCRIPT_DIR"
    log "  Building containers..."
    docker-compose build --no-cache

    log "  Starting services..."
    docker-compose up -d

    # Wait for health checks
    log "Waiting for health checks (60s)..."
    sleep 60

    # Verify deployment
    log "Verifying deployment..."

    if curl -f -s http://localhost:5000/api/health > /dev/null 2>&1; then
        success "Backend healthy"
    else
        error "Backend unhealthy - Rolling back..."
        rollback "$BACKUP_FILE"
        exit 1
    fi

    if curl -f -s http://localhost:80 > /dev/null 2>&1 || curl -f -s http://localhost:8080 > /dev/null 2>&1; then
        success "Frontend healthy"
    else
        warning "Frontend check failed (non-critical, may be nginx port config)"
    fi

    # Success!
    echo ""
    success "🎉 Deployment successful!"
    echo ""
    echo "  Frontend: http://$(hostname -I | awk '{print $1}')"
    echo "  Backend:  http://$(hostname -I | awk '{print $1}'):5000/api"
    echo "  Health:   http://$(hostname -I | awk '{print $1}'):5000/api/health"
    echo ""
    echo "  Backup:   $BACKUP_FILE"
    echo ""
    echo "Monitor logs: cd $SCRIPT_DIR && docker-compose logs -f"

    # Keep only last 10 backups
    log "Cleaning up old backups..."
    cd "$BACKUP_DIR" && ls -t backup-*.sql 2>/dev/null | tail -n +11 | xargs -r rm
}

# ======================================================================
# Rollback Function
# ======================================================================
rollback() {
    local backup_file=$1

    error "Deployment failed - initiating rollback"

    cd "$SCRIPT_DIR"
    docker-compose down

    if [ -f "$backup_file" ] && [ -s "$backup_file" ]; then
        log "Restoring database from backup..."
        docker-compose up -d db
        sleep 10
        cat "$backup_file" | docker-compose exec -T db psql -U "${POSTGRES_USER:-ala_user}" "${POSTGRES_DB:-ala_production}"
    fi

    docker-compose up -d
    error "Rolled back to previous version"
}

# ======================================================================
# Execute
# ======================================================================
main "$@"
